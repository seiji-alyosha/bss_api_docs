openapi: 3.1.0
info:
  version: 6.0.4
  title: Bible SuperSearch API Documentation
  contact:
    name: AIC Web Tech
    url: aicwebtech.com
  license:
    name: GNU GPL v3.0
    url: https://github.com/seiji-alyosha/ennoia_api_docs?tab=MIT-1-ov-file
externalDocs:
  description: "To install the API on your website, please visit:"
  url: "http://www.biblesupersearch.com/downloads"
x-tagGroups: #organizes the defined tags (from the previous section) into a larger category. In the UI, this is the heading above the two endpoint tags.
servers:
  - url: https://api.biblesupersearch.com
    description: Bible SuperSearch API
paths:
  /api:
    get:
      summary: "Query"
      description: "For all queries of Bible information in our database. Includes both keyword searches and passage retrieval."
      operationId: QueryPath
      parameters:
        - $ref: "#/components/parameters/reference"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/request"
        - $ref: "#/components/parameters/bible"
        - $ref: "#/components/parameters/whole_words
        - $ref: "#/components/parameters/exact_case"
        - $ref: "#/components/parameters/data_format"
        - $ref: "#/components/parameters/highlight"
        - $ref: "#/components/parameters/highlight_tag"
        - $ref: "#/components/parameters/keyword_limit"
        - $ref: "#/components/parameters/markup"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/page_limit"
        - $ref: "#/components/parameters/page_all"
        - $ref: "#/components/parameters/context"
        - $ref: "#/components/parameters/context_range"
        - $ref: "#/components/parameters/search_type"
        - $ref: "#/components/parameters/keyword_limit"
        - $ref: "#/components/parameters/proximity_limit"
        - $ref: "#/components/parameters/markup"
        - $ref: "#/components/parameters/parallel_search_error_suppress"
        - $ref: "#/components/parameters/callback"
      responses:
        "200":
          $ref: "#/components/responses/Success"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      security:
        - basic_auth: []

  /api/statics:
    get:
      summary: "Get information about all books in your library."
      description: "Gets the title, author, notes, and added date for all books."
      operationId: GetAllBooks
      responses:
        "200":
          $ref: "#/components/responses/AllBooksSuccess"
        "401":
          $ref: "#/components/responses/Unauthorized"
      security:
      - basic_auth: []
      
components:
  parameters:
    reference:
      name: reference
      # where the parameter is located (path/query/header/cookie)
      in: query
      # either true or false. Path parameters are always true.
      required: false
      # data type and constraints 
      description: "The passage reference."
      schema:
        type: string
    search:
    request:
    bible:
    whole-words:
    exact_case:
    data_format:
    highlight:
    highlight_tag:
    page:
    page_limit:
    page_all:
    context:
    context_range:
    search_type:
    keyword_limit:
    proximity_limit:
    markup:
    parallel_search_error_suppress:
    callback:
  securitySchemes:
    basic_auth:
      type: http
      scheme: basic
      description: "Basic HTTP authorization. Use your username and password."
  responses:
    Success:
      description: "Successful response."
      content:
        application/json:
          schema:
            type: object
            properties:
              added:
                type: string
                description: "When the user added the book to their library."                  
              author:
                type: string
                description: "The author of the book."                  
              id:
                type: integer
                description: "The book id."
              notes:
                type: string
                description: "Notes that the user entered for the book."
              title:
                type: string
                description: "The title of the book."
          examples:
            success:
              summary: "Retrieved book"
              value: 
                added: "2025-02-25 11:59:59"
                author: "John Doe"
                id: 123
                notes: "Here are some notes about the book."
                title: "Title of book"
    AllBooksSuccess:
      description: "Retrieved all books successfully"
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                added:
                  type: string
                  description: "When the user added the book to their library."                  
                author:
                  type: string
                  description: "The author of the book."                  
                id:
                  type: integer
                  description: "The book id."
                notes:
                  type: string
                  description: "Notes that the user entered for the book."
                title:
                  type: string
                  description: "The title of the book."
          examples:
            success:
              summary: "Retrieved all books"
              value: [
                {
                  added: "2025-02-25 11:59:59",
                  author: "John Doe",
                  id: 123,
                  notes: "Here are some notes about the book.",
                  title: "Title of book"
                },
                {
                  added: "2024-07-30 3:22:11",
                  author: "John Doe",
                  id: 124,
                  notes: "Here are some notes about the book.",
                  title: "Another title of book"
                }
              ]
    Unauthorized:
      description: "Authentication failed"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: "An error message that tells users what happened and how to prevent the error."
          examples:
            no_auth:
              summary: "No credentials provided"
              value:
                error: "Please provide a username and a password."
            invalid_auth:
              summary: "Invalid credentials"
              value:
                error: "We couldn't find that account. Please try again with a different username and/or password."
    # unsuccessful 
    NotFound:
      description: "Book not found"
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                description: "An error message that tells users what happened and how to prevent the error."
                example: "Sorry, we couldn't find a book with that id. Please try with a different id."